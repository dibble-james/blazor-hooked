@page "/hooks"
<PageTitle>Blazor Hooked - Hooks</PageTitle>

<h4><code>UseEffect</code></h4>
<p>Effects are used to start background tasks and clean up after them when they're finished with.  The classic example would be to start listening on a websocket when the component is first rendered, then gracefully shutdown the connection when the component is unmounted and disposed.  If your Effect uses a variable like a value from <code>UseState</code> or a component paramenter and you'd like the Effect to re-run when that changes, you add that variable as a Dependency by letting <code>UseEffect</code> track it's value when you define the Effect.</p>
<pre><code class="language-razor">@@inject WebSocketService UserNotificationService

@@code {
    [Parameter]
    public Guid UserId { get; set; }

    public Func&lt;Func&lt;Task&gt;&gt; ListenForUserNotifications(SetState&lt;string[]&gt; setUserMessages) =&gt; async () =&gt;
    {
        await UserNotificationService.StartListening(UserId, setUserMessages);

        return async () =&gt; await UserNotificationService.StopListening(UserId);
    };
}

&lt;Hook&gt;
    @@{
        var (messages, setMessages) = context.UseState(new string[0]);

        context.UseEffect(ListenForUserNotifications(setMessages), new object[] { this.UserId });
    }

    @@foreach(var message in messages)
    {
        &lt;p&gt;@@message&lt;/p&gt;
    }
&lt;/Hook&gt;
</code></pre>