@page "/helpers"

<PageTitle>Blazor Hooked - Helpers</PageTitle>

@using Demo.Data
@inject WeatherForecastService ForecastService

<h1>Loader</h1>

<p>A common use for a reducer is to track an async request. In-fact is so common that to save you some more boiler plate, the <code>Loader</code> component is built in.</p>
<pre><code class="language-razor">&lt;Loader Load=@@LoadData T="object"&gt;
    &lt;Loading&gt;
        &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
    &lt;/Loading&gt;
    &lt;Loaded Context="data"&gt;
        @@data
    &lt;/Loaded&gt;
    &lt;Failed&gt;
        &lt;p&gt;&lt;em&gt;Uhoh...&lt;/em&gt;&lt;/p&gt;
    &lt;/Failed&gt;
&lt;/Loader&gt;

@@code {
    private async Task LoadData(Dispatch dispatch)
    {
        try
        {
            var data = await SomeAsyncService();

            dispatch(new LoaderActions.Loaded&lt;object&gt;(data));
        }
        catch (Exception ex)
        {
            dispatch(new LoaderActions.Failed(ex));
        }
    }
}
</code></pre>

<Hook Context="Hook">
    @{
        var (date, setDate) = Hook.UseState(0);
    }

    <div>
        <button class="btn btn-primary" @onclick=@(() => setDate(date - 1))>Previous Day</button>
        <button class="btn btn-primary" @onclick=@(() => setDate(date + 1))>Next Day</button>
    </div>

    <Loader Load=@Loader(date) T="WeatherForecast[]" Dependencies=@(new object[] {date})>
        <Loading>
            <p><em>Loading...</em></p>
        </Loading>
        <Loaded Context="forecasts">
            <table class="table table-dark">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        </Loaded>
        <Failed>
            <p><em>Uhoh...</em></p>
        </Failed>
    </Loader>
</Hook>

@code {
    private Action<Dispatch> Loader(int date) => async dispatch =>
    {
        try
        {
            var forcasts = await this.ForecastService.GetForecastAsync(DateTime.Now);

            dispatch(new LoaderActions.Loaded<WeatherForecast[]>(forcasts));
        }
        catch (Exception ex)
        {
            dispatch(new LoaderActions.Failed(ex));
        }
    };
}
