@typeparam T

@code {
    [Parameter, EditorRequired]
    public Action<Dispatch>? Load { get; init; }

    [Parameter]
    public RenderFragment<bool>? Loading { get; init; }

    [Parameter, EditorRequired]
    public RenderFragment<T?>? Loaded { get; init; }

    [Parameter]
    public RenderFragment<Exception?>? Failed { get; init; }

    [Parameter]
    public object[]? Dependencies { get; init; }
}

<Hook>
    @{
        var (state, dispatch) = context.UseLoaderReducer<T>();
        context.UseEffect(() =>
        {
            dispatch(new LoaderActions.Load());
            Load!(dispatch);
        }, Dependencies ?? Array.Empty<object>());

        if (state!.Loading && this.Loading is not null)
        {
            @Loading!(true)
        }

        if (state!.TryGetResult(out var result))
        {
            @Loaded!(result)
        }

        if (state!.TryGetFailure(out var failure) && this.Failed is not null)
        {
            @Failed!(failure)
        }
    }
</Hook>