@code {
    public HookComponentBase()
    {
        this.Hook = new HookContext();
        this.Hook.StateHasChanged += OnStateChanged;
    }

    protected HookContext Hook { get; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await this.Hook.RunEffects();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await this.Hook.RunEffects();
    }

    public ValueTask DisposeAsync()
    {
        this.Hook.StateHasChanged -= OnStateChanged;
        return ((IAsyncDisposable)this.Hook).DisposeAsync();
    }

    private void OnStateChanged() => this.InvokeAsync(StateHasChanged);
}
